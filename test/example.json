[
    {
        "id": "a9f75242.e38358",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "54ff4ee2.36c4e8",
        "type": "snowflakedw",
        "z": "a9f75242.e38358",
        "name": "payload binding",
        "comments": "binding the msg.payload to the query and execute the script",
        "server": "e48171c1.8c27e8",
        "warehouse": "QA_ROBOT_XS_WH",
        "database": "QA_ROBOT_DB",
        "schema": "INFORMATION_SCHEMA",
        "role": "QA_ROBOT_UPDATER",
        "bind": true,
        "sqlText": "SELECT * FROM \"QA_ROBOT_DB\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE ORDINAL_POSITION = ?;",
        "action": "all",
        "rows": "",
        "start": "",
        "end": "",
        "x": 315,
        "y": 170,
        "wires": [
            [
                "f1309c2.2ec836"
            ]
        ]
    },
    {
        "id": "50a8d135.1457c8",
        "type": "inject",
        "z": "a9f75242.e38358",
        "name": "",
        "topic": "",
        "payload": "[7]",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 136.5,
        "y": 106,
        "wires": [
            [
                "54ff4ee2.36c4e8"
            ]
        ]
    },
    {
        "id": "f1309c2.2ec836",
        "type": "debug",
        "z": "a9f75242.e38358",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "results",
        "targetType": "msg",
        "x": 445,
        "y": 67,
        "wires": []
    },
    {
        "id": "cf5c8dc1.9def48",
        "type": "snowflakedw",
        "z": "a9f75242.e38358",
        "name": "Range of rows",
        "comments": "Only getting a particular range of rows from the query. We can also get the first n rows and last n rows or all rows.",
        "server": "e48171c1.8c27e8",
        "warehouse": "QA_ROBOT_XS_WH",
        "database": "QA_ROBOT_DB",
        "schema": "INFORMATION_SCHEMA",
        "role": "QA_ROBOT_UPDATER",
        "bind": false,
        "sqlText": "SELECT * FROM \"QA_ROBOT_DB\".\"INFORMATION_SCHEMA\".\"COLUMNS\";",
        "action": "range",
        "rows": "",
        "start": "50",
        "end": "99",
        "x": 307,
        "y": 347,
        "wires": [
            [
                "a92e7b75.3e7dc"
            ]
        ]
    },
    {
        "id": "1c54350a.59c8d3",
        "type": "inject",
        "z": "a9f75242.e38358",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 138.5,
        "y": 283,
        "wires": [
            [
                "cf5c8dc1.9def48"
            ]
        ]
    },
    {
        "id": "a92e7b75.3e7dc",
        "type": "debug",
        "z": "a9f75242.e38358",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "results",
        "targetType": "msg",
        "x": 437,
        "y": 244,
        "wires": []
    },
    {
        "id": "4140c410.fbe84c",
        "type": "snowflakedw",
        "z": "a9f75242.e38358",
        "name": "Big query",
        "comments": "Only getting a particular range of rows from the query. We can also get the first n rows and last n rows or all rows.",
        "server": "e48171c1.8c27e8",
        "warehouse": "QA_ROBOT_XS_WH",
        "database": "QA_ROBOT_DB",
        "schema": "INFORMATION_SCHEMA",
        "role": "QA_ROBOT_UPDATER",
        "bind": false,
        "sqlText": "\nwith param_table as\n                    (\n                     select 'QA_ROBOT_DB'                as database_name\n                          , 'QA_ROBOT_UPDATER'                  as schema_name\n                          , 'WEBTESTRESULTS'             as table_name\n                          ,  1                        as start_col\n                          ,  100                         as end_col                                             \n                    )\n      , catalog_table  as\n                    (\n                           select p.database_name\n                                , c.table_catalog\n                                , c.table_schema\n                                , c.table_name\n                                , c.column_name\n                                , c.ordinal_position\n                                , c.data_type\n                                , p.start_col\n                                , p.end_col\n                                , row_number() over (partition by c.table_catalog, c.table_schema, c.table_name order by ordinal_position) rn\n                             from QA_ROBOT_DB.information_schema.columns c                          -----$database_name_v\n                       inner join param_table p\n                               on lower(p.table_name)   = lower(c.table_name)\n                              and lower(p.schema_name)  = lower(c.table_schema)   \n                     )\n       select c.table_name                                 ----  Generate select line\n            , 1 seq_no\n            , c.table_schema\n            , c.ordinal_position\n            ,case \n               when c.ordinal_position = c.start_col  then 1\n               else 2\n              end next_seq \n            ,case \n               when c.ordinal_position = c.start_col   then 'select max('|| c.column_name||'_null'||') as '||c.column_name||'_null'  \n               else                                          '     , max('|| c.column_name||'_null'||') as '||c.column_name||'_null'  \n              end stmt \n         from catalog_table c\n        where c.ordinal_position >=  start_col   -- 1 \n          and c.ordinal_position <=  end_col\n union all \n       select c.table_name                                 ----  Generate select line\n            , 5 seq_no\n            , c.table_schema\n            , c.ordinal_position\n            , 1 as next_seq\n            , '  from ( '\n         from catalog_table c\n        where c.ordinal_position = start_col\nunion all\n    select c.table_name                                 ----  Generate select line\n            , 10 seq_no\n            , c.table_schema\n            , c.ordinal_position\n            , 1 as next_seq\n            , '  select sum(case when '|| c.column_name || ' is null then 1 else 0 end) over ( partition by '||c.column_name||' order by '|| c.column_name|| ' asc nulls first) as '|| c.column_name||'_null' stmt\n         from catalog_table c\n        where c.ordinal_position = start_col   -- 1 \n\n union all \n      select c.table_name                                 ----  Generate count line\n            , 20 seq_no\n            , c.table_schema\n            , c.ordinal_position\n            , 1 as next_seq\n            , '       , sum(case when '|| c.column_name || ' is null then 1 else 0 end) over ( partition by '||c.column_name||' order by '|| c.column_name|| ' asc nulls first) as '|| c.column_name||'_null' stmt\n         from catalog_table c\n        where c.ordinal_position > start_col  \n         and c.ordinal_position <= end_col\n union all        \n   select c.table_name                                  ----- generate from clause\n            , 30 seq_no\n            , c.table_schema\n            , c.ordinal_position\n            , 1 as next_seq\n            , '   from  '||c.database_name||'.'||c.table_schema||'.'||c.table_name as stmt\n         from catalog_table c\n        where c.ordinal_position = start_col\n union \n         select c.table_name\n              , 50 seq_no\n              , c.table_schema\n              , c.ordinal_position\n                 ,case \n               when c.ordinal_position = c.start_col  then 1\n               else 2\n              end next_seq \n              , case \n                  when c.ordinal_position = start_col then 'where '||c.column_name||' is null'\n                  else 'or '||c.column_name||' is null'\n                end   as stmt\n         from catalog_table c\n        where c.ordinal_position >=  start_col   -- 1 \n          and c.ordinal_position <=  end_col      \n union all        \n   select c.table_name                                  ----- generate from clause\n            , 70 seq_no\n            , c.table_schema\n            , c.ordinal_position\n            , 1 as next_seq\n            , '  )'  as stmt\n         from catalog_table c\n        where c.ordinal_position = start_col        \n   order by 1,3,2,4, 5 ",
        "action": "all",
        "rows": "",
        "start": "",
        "end": "",
        "x": 298,
        "y": 523,
        "wires": [
            [
                "5f3acd17.29129c"
            ]
        ]
    },
    {
        "id": "dab4007b.9172d8",
        "type": "inject",
        "z": "a9f75242.e38358",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 149.5,
        "y": 459,
        "wires": [
            [
                "4140c410.fbe84c"
            ]
        ]
    },
    {
        "id": "5f3acd17.29129c",
        "type": "debug",
        "z": "a9f75242.e38358",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "results",
        "targetType": "msg",
        "x": 448,
        "y": 420,
        "wires": []
    },
    {
        "id": "e48171c1.8c27e8",
        "type": "snowflake-server",
        "z": "",
        "account": "axcessfinancial.us-east-1",
        "username": "QA_ROBOT_UPDATER",
        "password": "fu8TsH74d7eWT",
        "servername": ""
    }
]